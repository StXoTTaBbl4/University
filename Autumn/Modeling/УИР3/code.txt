**********************************************************************************************
*                              Модель СМО G/G/K/E                                            *
**********************************************************************************************
*                           И с х о д н ы е   д а н н ы е                                    *
**********************************************************************************************
E_buf1    EQU    0; емкость накопителя для первого прибора
E_buf2    EQU    1; емкость накопителя для второго прибора
E_buf3    EQU    1; емкость накопителя для третьего прибора
t_a	EQU    173.01; средний интервал между поступающими заявками                        |173,01 из УИР 1
t_a_min	EQU	10; минимальный интервал между заявками (для равномерного распределения) 
t_a_max	EQU	30; максимальный интервал между заявками (для равномерного распределения)
t_b	EQU	20; средняя длительность обслуживания заявки в приборе                  
RN_a	EQU	20; номер генератора для потока                                          
RN_b	EQU	553; номер генератора для длительности обслуживания                      
* Параметры гиперэкспоненциального распределения:                                            
RN_H	EQU	91; номер генератора для гиперэкспоненциального распределения             
qq	EQU	0.1; вероятность выбора первой фазы                                      
tt_1	EQU	9.8; мат. ожидание первой фазы гиперэкспоненциального распределения      
tt_2	EQU	0.47; мат. ожидание второй фазы гиперэкспоненциального распределения     
* Параметры гипоэкспоненциального распределения (Эрланга):                                   
k_erl	EQU	2; порядок распределения Эрланга                                         
RN_erl1	EQU	31; номер первого генератора для распределения Эрланга 2-го порядка      
RN_erl2	EQU	125; номер второго генератора для распределения Эрланга 2-го порядка     
********************************************************************************************** 
TU_uzel   TABLE	M1,0.2,0.2,50;										   
TU_uzel1     TABLE    M1,12,12,30;
TU_uzel2     TABLE    M1,12,12,30;
TU_uzel3     TABLE    M1,12,12,30;
TU_buf   QTABLE	buf1,0.1,0.1,50; 									   
TU_buf1  QTABLE   buf1,0.1,0.1,50;
TU_buf2  QTABLE   buf2,0.1,0.1,50;
TU_buf3  QTABLE   buf3,0.1,0.1,50;
uzel	STORAGE	3;										   | число обслуживающих приборов из УИР 2                                   
Erl_2	VARIABLE	(Exponential(RN_erl1,0,t_a/2))+(Exponential(RN_erl2,0,t_a/2)); 		   
**********************************************************************************************
* 	Служебные переменные, необходимые для процедуры GetRandomNumberFromFile            *
**********************************************************************************************
ErrorCodes   MATRIX ,2,1;  										   | Коды ошибок открытия/закрытиия файла (при наличии ошибок в конце моделирования будут записаны ненулевые значения)  
FilePosition MATRIX ,1,1 ; 										   | Текущий номер строки в файле, из которой читается число (увеличивается на 1 с каждым чтением)
**********************************************************************************************
* 	    В качестве исполняемого оставить только ОДИН оператор GENERATE !!!             *
**********************************************************************************************
*GENERATE	(Exponential(RN_a,0,t_a));										   | Для задания 3.3.2 нужны экспоненциальный, трасса, эрланг 2 порядка
*GENERATE (GetRandomNumberFromFile("trace_lab_1.txt"));						   |
*GENERATE	(hyper1(RN_H, qq, tt_1, tt_2));									   |
GENERATE	V$Erl_2;											   |
TRANSFER .4,Met_1,Next_Choice
Next_Choice TRANSFER .834,Met_2,Met_3

Met_1 TEST L F$uzel1,1,end1; Так как буфера у нас тут нет, проверять надо не его переполнение, а занятость самого прибора
           QUEUE buf1
	 SEIZE    uzel1
           ENTER uzel
           DEPART buf1    
*	 ADVANCE (Exponential(RN_a,0,t_a))
*	 ADVANCE (hyper1(RN_H, qq, tt_1, tt_2))
          ADVANCE (V$Erl_2);Закон распределения длительности обслуживания
	 RELEASE    uzel1
           LEAVE uzel
           TABULATE TU_uzel
           TABULATE TU_uzel1
           TERMINATE 1

Met_2 TEST L Q$buf2,E_buf2,end2 ; Проверка второго буфера
           QUEUE buf2
	 SEIZE      uzel2
           ENTER uzel
           DEPART buf2    
*	 ADVANCE (Exponential(RN_a,0,t_a))
*	 ADVANCE (hyper1(RN_H, qq, tt_1, tt_2))
          ADVANCE (V$Erl_2)
	 RELEASE    uzel2
           LEAVE uzel
           TABULATE TU_uzel
           TABULATE TU_uzel2
           TERMINATE 1

Met_3 TEST L Q$buf3,E_buf3,end3
           QUEUE buf3
	 SEIZE      uzel3
           ENTER uzel
           DEPART buf3    
*	 ADVANCE (Exponential(RN_a,0,t_a))
*	 ADVANCE (hyper1(RN_H, qq, tt_1, tt_2))
          ADVANCE (V$Erl_2)
	 RELEASE    uzel3
           LEAVE uzel
           TABULATE TU_uzel
           TABULATE TU_uzel3
           TERMINATE 1

end1    TERMINATE 1
end2    TERMINATE 1
end3    TERMINATE 1



*##########Не трогаем всё что ниже, нафиг нафиг###############
**************************************************************
* Процедура возвращает следующее прочитанное из файла число. *
* Числа в файле расположены по одному на каждой строчке.     *
* При выходе за границы файла чтение начинается с начала.    *
**************************************************************
PROCEDURE GetRandomNumberFromFile(FileName) BEGIN
    TEMPORARY OpenError, CloseError, LineFromFile, FileId;
    FileId = 1;
    OpenError = open(FileId,FileName);
    if (OpenError /= 0) then begin
        FileId = 2;
        OpenError = open(FileId,FileName);
        if (OpenError /=0) then begin
            ErrorCodes[1,1] = OpenError;
            return "";
        end;
    end;
    FilePosition[1,1] = FilePosition[1,1] + 1;
    seek(FileId,FilePosition[1,1]);
    LineFromFile = read(FileId);
    if (LineFromFile = "") then begin
        FilePosition[1,1] = 1;
        seek(FileId,FilePosition[1,1]);
        LineFromFile = read(FileId);
    end;
    CloseError = close(FileId);
    if (CloseError /=0) then begin
        ErrorCodes[2,1] = CloseError;
        return "";
    end;
    return value(LineFromFile);
END;
************************************************************
* Процедура возвращает значение псевдослучайной величины,  *
* распределенной по гиперэкспоненциальному закону, в       *
* соответствии с параметрами распределения qq, tt_1, tt_2. *
************************************************************
PROCEDURE hyper1(RN_H, qq, tt_1, tt_2) BEGIN
	if (uniform(1,0,1) < qq) then return exponential(RN_H,0,tt_1);
	else return exponential(RN_H,0,tt_2);		
END;
