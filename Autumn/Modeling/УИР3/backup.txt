**********************************************************************************************
*                              Модель СМО G/G/K/E                                            *
**********************************************************************************************
*                           И с х о д н ы е   д а н н ы е                                    *
**********************************************************************************************
E_buf	EQU	1; емкость накопителя (буфера)                                           | Меняем на емскость в модели(1)
t_a	EQU	5; средний интервал между поступающими заявками                          | Равен 1/лямбда. У нас лямбда=0.2, следовательно 1/0.2=10/2=5
t_a_min	EQU	10; минимальный интервал между заявками (для равномерного распределения) | ------
t_a_max	EQU	30; максимальный интервал между заявками (для равномерного распределения)| ------
t_b	EQU	25.91; средняя длительность обслуживания заявки в приборе                | Меняем на нашу (25.91)
RN_a	EQU	20; номер генератора для потока                                          | ------
RN_b	EQU	553; номер генератора для длительности обслуживания                      | ------
;												   | Тут что то было но я это выбросил, оно не надо
* Параметры гипоэкспоненциального распределения (Эрланга):                                   |
k_erl	EQU	2; порядок распределения Эрланга                                         | ------ У нас и так второе
RN_erl1	EQU	31; номер первого генератора для распределения Эрланга 2-го порядка      | ------
RN_erl2	EQU	125; номер второго генератора для распределения Эрланга 2-го порядка     | ------
********************************************************************************************** 
TU_uzel   TABLE	M1,0.2,0.2,50;										   | ------ Учёт длины очереди
TU_buf   QTABLE	buf1,0.1,0.1,50; 									   | ------ Учёт времени ожидания
uzel	STORAGE	3;										   | Меняем, это определение числа обслуживающих приборов(у нас их 3)                                    
Erl_2	VARIABLE	(Exponential(RN_erl1,0,t_a/2))+(Exponential(RN_erl2,0,t_a/2)); 		   | сл.величина по закону Эрланга 2-го порядка
*TU_queue  TABLE   0,1,1,20   ; Таблица для длины очереди (от 0 до 20)				   |
*TU_loss   TABLE   0,1,1,10   ; Таблица для потерь (до 10 заявок)					   |--чет не работают доп мерки ; _ ;
*TU_wait   TABLE   0,5,5,100  ; Таблица для времени ожидания (шаг 5, максимум 100)	 	   |
**********************************************************************************************
* 	Служебные переменные, необходимые для процедуры GetRandomNumberFromFile            *
**********************************************************************************************
ErrorCodes   MATRIX ,2,1;  										   | Коды ошибок открытия/закрытиия файла (при наличии ошибок в конце моделирования будут записаны ненулевые значения)  
FilePosition MATRIX ,1,1 ; 										   | Текущий номер строки в файле, из которой читается число (увеличивается на 1 с каждым чтением)
**********************************************************************************************
* 	    В качестве исполняемого оставить только ОДИН оператор GENERATE !!!             *
**********************************************************************************************
*GENERATE	(Exponential(RN_a,0,t_a))
GENERATE (GetRandomNumberFromFile("trace_lab_1.txt"))
*GENERATE	(hyper1(RN_H, qq, tt_1, tt_2))
*GENERATE	V$Erl_2
	TEST	L	Q$buf1,E_buf,zyx
	QUEUE	buf1
*	SEIZE	uzel
	ENTER	uzel
	DEPART	buf1	
	ADVANCE	(Exponential(RN_b,0,t_b))
*	RELEASE	uzel
	LEAVE	uzel
	TABULATE 	TU_uzel
	TERMINATE  1
zyx	TERMINATE  1



*##########Не трогаем всё что ниже, нафиг нафиг###############
**************************************************************
* Процедура возвращает следующее прочитанное из файла число. *
* Числа в файле расположены по одному на каждой строчке.     *
* При выходе за границы файла чтение начинается с начала.    *
**************************************************************
PROCEDURE GetRandomNumberFromFile(FileName) BEGIN
    TEMPORARY OpenError, CloseError, LineFromFile, FileId;
    FileId = 1;
    OpenError = open(FileId,FileName);
    if (OpenError /= 0) then begin
        FileId = 2;
        OpenError = open(FileId,FileName);
        if (OpenError /=0) then begin
            ErrorCodes[1,1] = OpenError;
            return "";
        end;
    end;
    FilePosition[1,1] = FilePosition[1,1] + 1;
    seek(FileId,FilePosition[1,1]);
    LineFromFile = read(FileId);
    if (LineFromFile = "") then begin
        FilePosition[1,1] = 1;
        seek(FileId,FilePosition[1,1]);
        LineFromFile = read(FileId);
    end;
    CloseError = close(FileId);
    if (CloseError /=0) then begin
        ErrorCodes[2,1] = CloseError;
        return "";
    end;
    return value(LineFromFile);
END;
************************************************************
* Процедура возвращает значение псевдослучайной величины,  *
* распределенной по гиперэкспоненциальному закону, в       *
* соответствии с параметрами распределения qq, tt_1, tt_2. *
************************************************************
PROCEDURE hyper1(RN_H, qq, tt_1, tt_2) BEGIN
	if (uniform(1,0,1) < qq) then return exponential(RN_H,0,tt_1);
	else return exponential(RN_H,0,tt_2);		
END;
